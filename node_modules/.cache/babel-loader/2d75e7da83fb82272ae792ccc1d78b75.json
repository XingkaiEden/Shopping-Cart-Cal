{"ast":null,"code":"var _jsxFileName = \"/Users/xingkaiyang/Desktop/react-app/src/componets/counter.jsx\";\nimport React, { Component } from \"react\";\nimport { link } from \"fs\";\nimport { tsConstructorType } from \"@babel/types\";\n\nclass Counter extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.formatCounter = () => {\n      const value = this.props.counter.value;\n      return value === 0 ? \"Zero\" : value;\n    };\n  }\n\n  //   state = {\n  //     count: this.props.counter.value, //every react component has a property called props which is a plain JS object includes all the attributes  that we set in Counters component.\n  //     //Notice that  \"key\" is not part of props\n  //     // imageUrl: \"https://picsum.photos/300\",\n  //     // tags: [\"tag1\", \"tag2\", \"tag3\"]\n  //     tags: []\n  //   };\n  //   styles = {\n  //     fontSize: 50,\n  //     fontWeight: \"bold\"\n  //   };\n  //   constructor() {\n  //     super(); //due to this is a child class of Counter, we have to use super() to get access to all things first\n  //     this.handleIncrement = this.handleIncrement.bind(this); // here you bind this for handleIncreamnet\n  //   }\n  //   handleIncrement() {\n  //     //   you don't have access to object(this)\n  //     // but you can have access in a tsConstructor, so we bind this for handleIncrement in constructor\n  //     console.log(\"sdfasdf\", this);\n  //   }\n  //there is another way solve bind eventhandler problem, by using arrow function\n  //   arrow function don't remaind that this keyword\n  //   handleIncrement = () => {\n  //     //catch the passed object;\n  //     // this.state.count++; // doesn't work in this way of react, the value actually increases but react just isn't aware of that. we need override the property explicity\n  //     // a method from super class Component called this.setState();\n  //     this.setState({ count: this.state.count + 1 });\n  //   };\n  //   renderTag() {\n  //     if (this.state.tags.length === 0)\n  //       return <p>There is no items in the list!</p>;\n  //     return (\n  //       <ul>\n  //         {this.state.tags.map(tag => (\n  //           <li key={tag}>{tag}</li>\n  //         ))}\n  //       </ul>\n  //     );\n  //   }\n  render() {\n    // let classes = \"badge mr-2 badge-\";\n    // classes += this.state.count === 0? \"warning\": \"primary\";\n    // this is dynamically rendering\n    // you can refactor above to a method: shortcut: ctrl+shift+r  then you can call the method directly in html\n    // let classes = this.getBadgeClasses();\n    // conditional rendering two method: due to there is no if statement in jsx, then below\n    //1. use a function in this case is renderTag()\n    //2. use javascript mechanism ex: true&&'string'&&1 return 1\n    // reason is javacript can && with non-boolean value, non-empty string and non-zero number will be consider as true, then it will return the last condition.\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: this.getBadgeClasses(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, this.formatCounter()), React.createElement(\"button\", {\n      // here is why is handleIncrement not handleIncrement(),\n      // you pass the reference not the method\n      //   onClick is eventHandler\n      //   onClick={this.handleIncrement} //sometimes you need to pass sth. to handler, then do below\n      onClick: () => this.props.onIncrement(this.props.counter) // do a function inside {}, pass the object to handler\n      ,\n      className: \"btn btn-primary btn-sm mr-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Increment\"), React.createElement(\"button\", {\n      className: \"btn btn-danger btn-sm mb-2\",\n      onClick: () => this.props.onDelete(this.props.counter.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Delete\"));\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge mr-2 badge-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/Users/xingkaiyang/Desktop/react-app/src/componets/counter.jsx"],"names":["React","Component","link","tsConstructorType","Counter","formatCounter","value","props","counter","render","getBadgeClasses","onIncrement","onDelete","id","classes"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,IAArB;AACA,SAASC,iBAAT,QAAkC,cAAlC;;AAEA,MAAMC,OAAN,SAAsBH,SAAtB,CAAgC;AAAA;AAAA;;AAAA,SA8F9BI,aA9F8B,GA8Fd,MAAM;AAAA,YACZC,KADY,GACF,KAAKC,KAAL,CAAWC,OADT,CACZF,KADY;AAEpB,aAAOA,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuBA,KAA9B;AACD,KAjG6B;AAAA;;AAC9B;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAG,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAME;AAAM,MAAA,SAAS,EAAE,KAAKC,eAAL,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0C,KAAKL,aAAL,EAA1C,CANF,EAOE;AACE;AACA;AACA;AACA;AACA,MAAA,OAAO,EAAE,MAAM,KAAKE,KAAL,CAAWI,WAAX,CAAuB,KAAKJ,KAAL,CAAWC,OAAlC,CALjB,CAK6D;AAL7D;AAME,MAAA,SAAS,EAAC,6BANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAPF,EAiBE;AACE,MAAA,SAAS,EAAC,4BADZ;AAEE,MAAA,OAAO,EAAE,MAAM,KAAKD,KAAL,CAAWK,QAAX,CAAoB,KAAKL,KAAL,CAAWC,OAAX,CAAmBK,EAAvC,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjBF,CADF;AAmCD;;AAMDH,EAAAA,eAAe,GAAG;AAChB,QAAII,OAAO,GAAG,mBAAd;AACAA,IAAAA,OAAO,IAAI,KAAKP,KAAL,CAAWC,OAAX,CAAmBF,KAAnB,KAA6B,CAA7B,GAAiC,SAAjC,GAA6C,SAAxD;AACA,WAAOQ,OAAP;AACD;;AAvG6B;;AA0GhC,eAAeV,OAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { link } from \"fs\";\nimport { tsConstructorType } from \"@babel/types\";\n\nclass Counter extends Component {\n  //   state = {\n  //     count: this.props.counter.value, //every react component has a property called props which is a plain JS object includes all the attributes  that we set in Counters component.\n  //     //Notice that  \"key\" is not part of props\n\n  //     // imageUrl: \"https://picsum.photos/300\",\n  //     // tags: [\"tag1\", \"tag2\", \"tag3\"]\n  //     tags: []\n  //   };\n  //   styles = {\n  //     fontSize: 50,\n  //     fontWeight: \"bold\"\n  //   };\n\n  //   constructor() {\n  //     super(); //due to this is a child class of Counter, we have to use super() to get access to all things first\n  //     this.handleIncrement = this.handleIncrement.bind(this); // here you bind this for handleIncreamnet\n  //   }\n  //   handleIncrement() {\n  //     //   you don't have access to object(this)\n  //     // but you can have access in a tsConstructor, so we bind this for handleIncrement in constructor\n  //     console.log(\"sdfasdf\", this);\n  //   }\n\n  //there is another way solve bind eventhandler problem, by using arrow function\n  //   arrow function don't remaind that this keyword\n  //   handleIncrement = () => {\n  //     //catch the passed object;\n  //     // this.state.count++; // doesn't work in this way of react, the value actually increases but react just isn't aware of that. we need override the property explicity\n  //     // a method from super class Component called this.setState();\n  //     this.setState({ count: this.state.count + 1 });\n  //   };\n\n  //   renderTag() {\n  //     if (this.state.tags.length === 0)\n  //       return <p>There is no items in the list!</p>;\n  //     return (\n  //       <ul>\n  //         {this.state.tags.map(tag => (\n  //           <li key={tag}>{tag}</li>\n  //         ))}\n  //       </ul>\n  //     );\n  //   }\n\n  render() {\n    // let classes = \"badge mr-2 badge-\";\n    // classes += this.state.count === 0? \"warning\": \"primary\";\n    // this is dynamically rendering\n\n    // you can refactor above to a method: shortcut: ctrl+shift+r  then you can call the method directly in html\n    // let classes = this.getBadgeClasses();\n\n    // conditional rendering two method: due to there is no if statement in jsx, then below\n    //1. use a function in this case is renderTag()\n    //2. use javascript mechanism ex: true&&'string'&&1 return 1\n    // reason is javacript can && with non-boolean value, non-empty string and non-zero number will be consider as true, then it will return the last condition.\n\n    return (\n      <div>\n        {/* <img src={this.state.imageUrl}/> */}\n        {/* two way to add style  */}\n        {/* <span style={this.styles} className=\"badge badge-primary mr-2\">{this.formatCounter()}</span> */}\n        {/* <span style={{fontSize:100}} className=\"badge badge-primary mr-2\">{this.formatCounter()}</span> */}\n        {/* {this.props.children}  */}\n        <span className={this.getBadgeClasses()}>{this.formatCounter()}</span>\n        <button\n          // here is why is handleIncrement not handleIncrement(),\n          // you pass the reference not the method\n          //   onClick is eventHandler\n          //   onClick={this.handleIncrement} //sometimes you need to pass sth. to handler, then do below\n          onClick={() => this.props.onIncrement(this.props.counter)} // do a function inside {}, pass the object to handler\n          className=\"btn btn-primary btn-sm mr-2\"\n        >\n          Increment\n        </button>\n        <button\n          className=\"btn btn-danger btn-sm mb-2\"\n          onClick={() => this.props.onDelete(this.props.counter.id)}\n        >\n          Delete\n        </button>\n        {/* rendering a list */}\n        {/* <ul>\n          {this.state.tags.map(tag => {\n            return <li key={tag}>{tag}</li>;\n          })}\n        </ul>\n        {this.renderTag()}\n        {this.state.tags.length === 0 &&\n          \"this is the second method that using conditional rednering\"} */}\n      </div>\n    );\n  }\n  formatCounter = () => {\n    const { value } = this.props.counter;\n    return value === 0 ? \"Zero\" : value;\n  };\n\n  getBadgeClasses() {\n    let classes = \"badge mr-2 badge-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n}\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}