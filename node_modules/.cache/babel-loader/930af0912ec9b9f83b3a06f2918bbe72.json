{"ast":null,"code":"var _jsxFileName = \"/Users/xingkaiyang/Desktop/react-app/src/componets/counter.jsx\";\nimport React, { Component } from \"react\";\nimport { link } from \"fs\";\nimport { tsConstructorType } from \"@babel/types\";\n\nclass Counter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: this.props.value,\n      //every react component has a property called props which is a plain JS object includes all the attributes  that we set in Counters component.\n      //Notice that  \"key\" is not part of props\n      // imageUrl: \"https://picsum.photos/300\",\n      // tags: [\"tag1\", \"tag2\", \"tag3\"]\n      tags: []\n    };\n    this.styles = {\n      fontSize: 50,\n      fontWeight: \"bold\"\n    };\n\n    this.handleIncreament = e => {\n      console.log(e); //catch the passed object;\n      // this.state.count++; // doesn't work in this way of react, the value actually increases but react just isn't aware of that. we need override the property explicity\n      // a method from super class Component called this.setState();\n\n      this.setState({\n        count: this.state.count + 1\n      });\n    };\n\n    this.formateCounter = () => {\n      const count = this.state.count;\n      return count === 0 ? \"Zero\" : count;\n    };\n  }\n\n  renderTag() {\n    if (this.state.tags.length === 0) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"There is no items in the list!\");\n    return React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, this.state.tags.map(tag => React.createElement(\"li\", {\n      key: tag,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, tag)));\n  }\n\n  render() {\n    // let classes = \"badge mr-2 badge-\";\n    // classes += this.state.count === 0? \"warning\": \"primary\";\n    // this is dynamically rendering\n    // you can refactor above to a method: shortcut: ctrl+shift+r  then you can call the method directly in html\n    // let classes = this.getBadgeClasses();\n    // conditional rendering two method: due to there is no if statement in jsx, then below\n    //1. use a function in this case is renderTag()\n    //2. use javascript mechanism ex: true&&'string'&&1 return 1\n    // reason is javacript can && with non-boolean value, non-empty string and non-zero number will be consider as true, then it will return the last condition.\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: this.getBadgeClasses(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, this.formateCounter()), React.createElement(\"button\", {\n      // here is why is handleIncreament not handleIncreament(),\n      // you pass the reference not the method\n      //   onClick is eventHandler\n      //   onClick={this.handleIncreament} //sometimes you need to pass sth. to handler, then do below\n      onClick: () => this.handleIncreament({\n        id: 1\n      }) // do a function inside {}, pass the object to handler\n      ,\n      className: \"btn btn-primary btn-sm ml-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Increment\"), React.createElement(\"button\", {\n      className: \"btn btn-danger btn-sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Delete\"));\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge mr-2 badge-\";\n    classes += this.state.count === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/Users/xingkaiyang/Desktop/react-app/src/componets/counter.jsx"],"names":["React","Component","link","tsConstructorType","Counter","state","count","props","value","tags","styles","fontSize","fontWeight","handleIncreament","e","console","log","setState","formateCounter","renderTag","length","map","tag","render","getBadgeClasses","id","classes"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,IAArB;AACA,SAASC,iBAAT,QAAkC,cAAlC;;AAEA,MAAMC,OAAN,SAAsBH,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC9BI,KAD8B,GACtB;AACNC,MAAAA,KAAK,EAAE,KAAKC,KAAL,CAAWC,KADZ;AACmB;AACzB;AAEA;AACA;AACAC,MAAAA,IAAI,EAAE;AANA,KADsB;AAAA,SAS9BC,MAT8B,GASrB;AACPC,MAAAA,QAAQ,EAAE,EADH;AAEPC,MAAAA,UAAU,EAAE;AAFL,KATqB;;AAAA,SA0B9BC,gBA1B8B,GA0BXC,CAAC,IAAI;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ,EADsB,CACN;AAChB;AACA;;AACA,WAAKG,QAAL,CAAc;AAAEX,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAmB;AAA5B,OAAd;AACD,KA/B6B;;AAAA,SAyF9BY,cAzF8B,GAyFb,MAAM;AAAA,YACbZ,KADa,GACH,KAAKD,KADF,CACbC,KADa;AAErB,aAAOA,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuBA,KAA9B;AACD,KA5F6B;AAAA;;AAiC9Ba,EAAAA,SAAS,GAAG;AACV,QAAI,KAAKd,KAAL,CAAWI,IAAX,CAAgBW,MAAhB,KAA2B,CAA/B,EACE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAAP;AACF,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKf,KAAL,CAAWI,IAAX,CAAgBY,GAAhB,CAAoBC,GAAG,IACtB;AAAI,MAAA,GAAG,EAAEA,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAeA,GAAf,CADD,CADH,CADF;AAOD;;AAEDC,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAME;AAAM,MAAA,SAAS,EAAE,KAAKC,eAAL,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0C,KAAKN,cAAL,EAA1C,CANF,EAOE;AACE;AACA;AACA;AACA;AACA,MAAA,OAAO,EAAE,MAAM,KAAKL,gBAAL,CAAsB;AAAEY,QAAAA,EAAE,EAAE;AAAN,OAAtB,CALjB,CAKmD;AALnD;AAME,MAAA,SAAS,EAAC,6BANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAPF,EAiBE;AAAQ,MAAA,SAAS,EAAC,uBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjBF,CADF;AA8BD;;AAMDD,EAAAA,eAAe,GAAG;AAChB,QAAIE,OAAO,GAAG,mBAAd;AACAA,IAAAA,OAAO,IAAI,KAAKrB,KAAL,CAAWC,KAAX,KAAqB,CAArB,GAAyB,SAAzB,GAAqC,SAAhD;AACA,WAAOoB,OAAP;AACD;;AAlG6B;;AAqGhC,eAAetB,OAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { link } from \"fs\";\nimport { tsConstructorType } from \"@babel/types\";\n\nclass Counter extends Component {\n  state = {\n    count: this.props.value, //every react component has a property called props which is a plain JS object includes all the attributes  that we set in Counters component.\n    //Notice that  \"key\" is not part of props\n\n    // imageUrl: \"https://picsum.photos/300\",\n    // tags: [\"tag1\", \"tag2\", \"tag3\"]\n    tags: []\n  };\n  styles = {\n    fontSize: 50,\n    fontWeight: \"bold\"\n  };\n\n  //   constructor() {\n  //     super(); //due to this is a child class of Counter, we have to use super() to get access to all things first\n  //     this.handleIncreament = this.handleIncreament.bind(this); // here you bind this for handleIncreamnet\n  //   }\n  //   handleIncreament() {\n  //     //   you don't have access to object(this)\n  //     // but you can have access in a tsConstructor, so we bind this for handleIncreament in constructor\n  //     console.log(\"sdfasdf\", this);\n  //   }\n\n  //there is another way solve bind eventhandler problem, by using arrow function\n  //   arrow function don't remaind that this keyword\n  handleIncreament = e => {\n    console.log(e); //catch the passed object;\n    // this.state.count++; // doesn't work in this way of react, the value actually increases but react just isn't aware of that. we need override the property explicity\n    // a method from super class Component called this.setState();\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  renderTag() {\n    if (this.state.tags.length === 0)\n      return <p>There is no items in the list!</p>;\n    return (\n      <ul>\n        {this.state.tags.map(tag => (\n          <li key={tag}>{tag}</li>\n        ))}\n      </ul>\n    );\n  }\n\n  render() {\n    // let classes = \"badge mr-2 badge-\";\n    // classes += this.state.count === 0? \"warning\": \"primary\";\n    // this is dynamically rendering\n\n    // you can refactor above to a method: shortcut: ctrl+shift+r  then you can call the method directly in html\n    // let classes = this.getBadgeClasses();\n\n    // conditional rendering two method: due to there is no if statement in jsx, then below\n    //1. use a function in this case is renderTag()\n    //2. use javascript mechanism ex: true&&'string'&&1 return 1\n    // reason is javacript can && with non-boolean value, non-empty string and non-zero number will be consider as true, then it will return the last condition.\n\n    return (\n      <div>\n        {/* <img src={this.state.imageUrl}/> */}\n        {/* two way to add style  */}\n        {/* <span style={this.styles} className=\"badge badge-primary mr-2\">{this.formateCounter()}</span> */}\n        {/* <span style={{fontSize:100}} className=\"badge badge-primary mr-2\">{this.formateCounter()}</span> */}\n        {/* {this.props.children}  */}\n        <span className={this.getBadgeClasses()}>{this.formateCounter()}</span>\n        <button\n          // here is why is handleIncreament not handleIncreament(),\n          // you pass the reference not the method\n          //   onClick is eventHandler\n          //   onClick={this.handleIncreament} //sometimes you need to pass sth. to handler, then do below\n          onClick={() => this.handleIncreament({ id: 1 })} // do a function inside {}, pass the object to handler\n          className=\"btn btn-primary btn-sm ml-2\"\n        >\n          Increment\n        </button>\n        <button className=\"btn btn-danger btn-sm\">Delete</button>\n        {/* rendering a list */}\n        {/* <ul>\n          {this.state.tags.map(tag => {\n            return <li key={tag}>{tag}</li>;\n          })}\n        </ul>\n        {this.renderTag()}\n        {this.state.tags.length === 0 &&\n          \"this is the second method that using conditional rednering\"} */}\n      </div>\n    );\n  }\n  formateCounter = () => {\n    const { count } = this.state;\n    return count === 0 ? \"Zero\" : count;\n  };\n\n  getBadgeClasses() {\n    let classes = \"badge mr-2 badge-\";\n    classes += this.state.count === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n}\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}